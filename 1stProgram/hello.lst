     1                                  ; program example cosc 2331
     2                                  ; author:  Dr. Laura Baker
     3                                  ; prints hello world to screen.
     4                                  ; prompts user to enter name
     5                                  ; outputs message with user name
     6                                  
     7                                  
     8                                  ; uninitialized data sectiom
     9                                   section .bss  
    10 00000000 <res 0000001E>           our_name resb 30
    11 0000001E <res 00000004>           name_len resd 1
    12 00000022 <res 00000032>           our_major resb 50
    13 00000054 <res 00000004>           major_len resd 1
    14                                  
    15                                  ;section declaration for defined data (must be initialized)
    16                                   section .data          
    17 00000000 48656C6C6F206D7920-      hello_msg db "Hello my fine feathered friend! ",10  ; the 10 is the newline(LineFeed)  
    18 00000009 66696E652066656174-
    19 00000012 686572656420667269-
    20 0000001B 656E6421200A       
    21                                   len1 equ $ - hello_msg            ; length of the message
    22 00000021 576861742069732079-      prompt_name db "What is your callsign? "
    23 0000002A 6F75722063616C6C73-
    24 00000033 69676E3F20         
    25                                   len3 equ $ - prompt_name    ; length of the prompt
    26 00000038 57656C636F6D652074-      welcome_msg db "Welcome to nasm "
    27 00000041 6F206E61736D20     
    28                                   len2 equ $ - welcome_msg   ; length of the message
    29 00000048 576861742069732079-      major_msg db "What is your major? "
    30 00000051 6F7572206D616A6F72-
    31 0000005A 3F20               
    32                                   len4 equ $ - major_msg	    ; length of message
    33 0000005C 0A                       newline db  10             ; our own string for a LineFeed(LF)
    34                                  
    35                                   section .text     ;  section declaration for instructions
    36                                  
    37                                                 ;we must export the entry point to the ELF linker or
    38                                   global _start ;loader. They conventionally recognize _start as their
    39                                                 ;entry point. Use ld -e foo to override the default.
    40                                   _start:
    41                                  
    42                                    ;write our hello world message (it includes lf)
    43 00000000 BA21000000                  mov edx,len1             ;  message length
    44 00000005 B9[00000000]                mov ecx, hello_msg       ; second argument: pointer to message to write
    45 0000000A BB01000000                  mov ebx,1                ; first argument: file handle (stdout)
    46 0000000F B804000000                  mov eax,4                ;system call number (sys_write)
    47 00000014 CD80                        int 0x80       ; call kernel to perform the interrupt (output string)
    48                                  
    49                                     ; now output prompt for name
    50 00000016 BA17000000                  mov edx,len3             ;  message length
    51 0000001B B9[21000000]                mov ecx, prompt_name     ; second argument: pointer to message to write
    52 00000020 BB01000000                  mov ebx,1                ; first argument: file handle (stdout)
    53 00000025 B804000000                  mov eax,4                ;system call number (sys_write)
    54 0000002A CD80                        int 0x80        ; call kernel to perform the interrupt (output string)
    55                                  b1:   
    56                                     ; now read the name   
    57 0000002C BA1E000000                  mov edx, 30            ; max chars to read
    58 00000031 B9[00000000]                mov ecx, our_name     ; where to store input value
    59 00000036 BB02000000                  mov ebx, 2             ; where to read from (stdin)
    60 0000003B B803000000                  mov eax, 3             ; read 
    61 00000040 CD80                        int 0x80        ; call kernel to perform the interrupt (input string)
    62                                    
    63                                     ; now save size of string input 
    64                                     ; which is placed into the eax register by interupt
    65                                  
    66 00000042 48                          dec eax                ; don't count newline
    67 00000043 A3[1E000000]                mov dword [name_len], eax  
    68                                  
    69                                    ; write our first prompt string to stdout
    70 00000048 BA10000000                  mov edx,len2             ;  message length
    71 0000004D B9[38000000]                mov ecx,welcome_msg      ; second argument: pointer to message to write
    72 00000052 BB01000000                  mov ebx,1                ; first argument: file handle (stdout)
    73 00000057 B804000000                  mov eax,4                ;system call number (sys_write)
    74 0000005C CD80                        int 0x80        ; call kernel to perform the interrupt
    75                                   
    76 0000005E 8B15[1E000000]              mov edx, dword [name_len]
    77 00000064 B9[00000000]                mov ecx, our_name
    78 00000069 BB01000000                  mov ebx, 1
    79 0000006E B804000000                  mov eax, 4
    80 00000073 CD80                        int 0x80        ; call kernel to perform the interrupt
    81                                  
    82                                   ; now output prompt for name
    83 00000075 BA14000000                  mov edx,len4             ;  message length
    84 0000007A B9[48000000]                mov ecx, major_msg     ; second argument: pointer to message to write
    85 0000007F BB01000000                  mov ebx,1                ; first argument: file handle (stdout)
    86 00000084 B804000000                  mov eax,4                ;system call number (sys_write)
    87 00000089 CD80                        int 0x80        ; call kernel to perform the interrupt (output string)
    88                                  b2:   
    89                                     ; now read the name   
    90 0000008B BA1E000000                  mov edx, 30            ; max chars to read
    91 00000090 B9[22000000]                mov ecx, our_major     ; where to store input value
    92 00000095 BB02000000                  mov ebx, 2             ; where to read from (stdin)
    93 0000009A B803000000                  mov eax, 3             ; read 
    94 0000009F CD80                        int 0x80        ; call kernel to perform the interrupt (input string)
    95                                  
    96 000000A1 48                          dec eax                ; don't count newline
    97 000000A2 A3[1E000000]                mov dword [name_len], eax  
    98                                  
    99                                    ; write our first prompt string to stdout
   100 000000A7 BA14000000                  mov edx,len4             ;  message length
   101 000000AC B9[48000000]                mov ecx,major_msg       ; second argument: pointer to message to write
   102 000000B1 BB01000000                  mov ebx,1               ; first argument: file handle (stdout)
   103 000000B6 B804000000                  mov eax,4                ;system call number (sys_write)
   104 000000BB CD80                        int 0x80        ; call kernel to perform the interrupt
   105                                   
   106 000000BD 8B15[54000000]              mov edx, dword [major_len]
   107 000000C3 B9[22000000]                mov ecx,our_major
   108 000000C8 BB01000000                  mov ebx, 1 
   109 000000CD B804000000                  mov eax, 4
   110 000000D2 CD80                        int 0x80        ; call kernel to perform the interrupt
   111                                  
   112                                  
   113                                    ; now print the newline
   114 000000D4 BA01000000                  mov edx, 1      		; 1 character to print
   115 000000D9 B9[5C000000]                mov ecx, newline            ; load address of character
   116 000000DE BB01000000                  mov ebx, 1                  ;  ebx = 1
   117 000000E3 B804000000                  mov eax, 4                  ;  eax = 4
   118 000000E8 CD80                        int 0x80        ; call kernel to perform the interrupt
   119                                  
   120                                    ; now exit the program    
   121 000000EA BB00000000                  mov ebx, 0       		; the stop interrupt
   122 000000EF B801000000                  mov eax, 1                  ; eax = 0, ebx = 1
   123 000000F4 CD80                        int 0x80        ; call kernel to perform the interrupt (stop)
